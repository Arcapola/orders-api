// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate_swagger = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Peter Polacik"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/customer": {
            "post": {
                "description": "Add a customer by JSON and store it in-memory (TODO)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Add a customer",
                "parameters": [
                    {
                        "description": "Add customer",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddCustomer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/health/ping": {
            "get": {
                "description": "run health-check ping request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "ping function",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order": {
            "post": {
                "description": "Add an order by JSON and store it in-memory (TODO)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Add an order",
                "parameters": [
                    {
                        "description": "Add order",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "models.AddCustomer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "string",
                    "example": "Street 1234, 01234 City, Country"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "A Company Ltd."
                }
            }
        },
        "models.AddOrder": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MenuItem"
                    }
                }
            }
        },
        "models.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "string",
                    "example": "Street 1234, 01234 City, Country"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "f3537d5c-cf15-48cc-b309-7a51312a574f"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "A Company Ltd."
                }
            }
        },
        "models.MenuItem": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "uint",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Food"
                },
                "unit_price": {
                    "type": "number",
                    "format": "float64",
                    "example": 3.99
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/models.Customer"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "f3537d5c-cf15-48cc-b309-7a51312a574f"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MenuItem"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo_swagger holds exported Swagger Info so clients can modify it
var SwaggerInfo_swagger = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Orders API",
	Description:      "API to manage restaurant orders",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate_swagger,
}

func init() {
	swag.Register(SwaggerInfo_swagger.InstanceName(), SwaggerInfo_swagger)
}
